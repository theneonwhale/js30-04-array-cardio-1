{"version":3,"sources":["js/cardio.js","index.js"],"names":["inventors","first","last","year","passed","people","fifteen","filter","console","table","names","map","sorted","sort","a","b","totalYears","reduce","total","log","sortedByYears","sortAplpha","split","aLast","bLast","data","transportation","acc","item"],"mappings":"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","file":"src.82f2314a.js","sourceRoot":"..\\src","sourcesContent":["const inventors = [\r\n  { first: 'Albert', last: 'Einstein', year: 1879, passed: 1955 },\r\n  { first: 'Isaac', last: 'Newton', year: 1643, passed: 1727 },\r\n  { first: 'Galileo', last: 'Galilei', year: 1564, passed: 1642 },\r\n  { first: 'Marie', last: 'Curie', year: 1867, passed: 1934 },\r\n  { first: 'Johannes', last: 'Kepler', year: 1571, passed: 1630 },\r\n  { first: 'Nicolaus', last: 'Copernicus', year: 1473, passed: 1543 },\r\n  { first: 'Max', last: 'Planck', year: 1858, passed: 1947 },\r\n  { first: 'Katherine', last: 'Blodgett', year: 1898, passed: 1979 },\r\n  { first: 'Ada', last: 'Lovelace', year: 1815, passed: 1852 },\r\n  { first: 'Sarah E.', last: 'Goode', year: 1855, passed: 1905 },\r\n  { first: 'Lise', last: 'Meitner', year: 1878, passed: 1968 },\r\n  { first: 'Hanna', last: 'HammarstrÃ¶m', year: 1829, passed: 1909 },\r\n];\r\n\r\nconst people = [\r\n  'Bernhard, Sandra',\r\n  'Bethea, Erin',\r\n  'Becker, Carl',\r\n  'Bentsen, Lloyd',\r\n  'Beckett, Samuel',\r\n  'Blake, William',\r\n  'Berger, Ric',\r\n  'Beddoes, Mick',\r\n  'Beethoven, Ludwig',\r\n  'Belloc, Hilaire',\r\n  'Begin, Menachem',\r\n  'Bellow, Saul',\r\n  'Benchley, Robert',\r\n  'Blair, Robert',\r\n  'Benenson, Peter',\r\n  'Benjamin, Walter',\r\n  'Berlin, Irving',\r\n  'Benn, Tony',\r\n  'Benson, Leana',\r\n  'Bent, Silas',\r\n  'Berle, Milton',\r\n  'Berry, Halle',\r\n  'Biko, Steve',\r\n  'Beck, Glenn',\r\n  'Bergman, Ingmar',\r\n  'Black, Elk',\r\n  'Berio, Luciano',\r\n  'Berne, Eric',\r\n  'Berra, Yogi',\r\n  'Berry, Wendell',\r\n  'Bevan, Aneurin',\r\n  'Ben-Gurion, David',\r\n  'Bevel, Ken',\r\n  'Biden, Joseph',\r\n  'Bennington, Chester',\r\n  'Bierce, Ambrose',\r\n  'Billings, Josh',\r\n  'Birrell, Augustine',\r\n  'Blair, Tony',\r\n  'Beecher, Henry',\r\n  'Biondo, Frank',\r\n];\r\n\r\n// Array.prototype.filter()\r\n// 1. Filter the list of inventors for those who were born in the 1500's\r\nconst fifteen = inventors.filter(({ year }) => year >= 1500 && year <= 1599);\r\nconsole.table(fifteen);\r\n// Array.prototype.map()\r\n// 2. Give us an array of the inventors first and last names\r\nconst names = inventors.map(({ first, last }) => `${first} ${last}`);\r\nconsole.table(names);\r\n// Array.prototype.sort()\r\n// 3. Sort the inventors by birthdate, oldest to youngest\r\nconst sorted = inventors.sort((a, b) => (a.year > b.year ? 1 : -1));\r\nconsole.table(sorted);\r\n// Array.prototype.reduce()\r\n// 4. How many years did all the inventors live all together?\r\nconst totalYears = inventors.reduce(\r\n  (total, { passed, year }) => total + passed - year,\r\n  0,\r\n);\r\nconsole.log(totalYears);\r\n\r\n// 5. Sort the inventors by years lived\r\nconst sortedByYears = inventors.sort((a, b) =>\r\n  a.passed - a.year > b.passed - a.year ? -1 : 1,\r\n);\r\nconsole.table(sortedByYears);\r\n// 6. create a list of Boulevards in Paris that contain 'de' anywhere in the name\r\n// https://en.wikipedia.org/wiki/Category:Boulevards_in_Paris\r\n// const category = document.querySelector('.mw-category');\r\n// const links = [...category.querySelectorAll('a')];\r\n// const de = links\r\n//   .map(link => link.textContent)\r\n//   .filter(street => street.includes('de'));\r\n// console.log(de);\r\n\r\n// 7. sort Exercise\r\n// Sort the people alphabetically by last name\r\nconst sortAplpha = people.sort((a, b) => {\r\n  const [aLast, aFirst] = a.split(', ');\r\n  const [bLast, bFirst] = b.split(', ');\r\n  return aLast > bLast ? 1 : -1;\r\n});\r\nconsole.log(sortAplpha);\r\n\r\n// 8. Reduce Exercise\r\n// Sum up the instances of each of these\r\nconst data = [\r\n  'car',\r\n  'car',\r\n  'truck',\r\n  'truck',\r\n  'bike',\r\n  'walk',\r\n  'car',\r\n  'van',\r\n  'bike',\r\n  'walk',\r\n  'car',\r\n  'van',\r\n  'car',\r\n  'truck',\r\n];\r\n\r\nconst transportation = data.reduce((acc, item) => {\r\n  if (!acc[item]) {\r\n    acc[item] = 0;\r\n  }\r\n  acc[item] += 1;\r\n\r\n  return acc;\r\n}, {});\r\nconsole.table(transportation);\r\n","import './styles.css';\r\nimport './js/cardio';\r\n"]}